{"version":3,"sources":["components/card/card.jsx","components/board/board.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","state","hidden","toggleCard","bind","deleteCard","moveCard","sIdx","categoryIdx","eIdx","cIdx","cardID","this","removeCard","e","preventDefault","setState","diff","updateCard","title","description","className","draggable","onDragEnd","stopPropagation","arr","fetchDragAndSet","value","placeholder","onChange","onClick","React","Component","Board","columns","cards","0","1","2","unassigned","drag","set","update","createCard","editColumn","swap","idx","field","copy","currentTarget","columnIdx","updated","cardId","i","length","slice","concat","t","d","push","columnId","newIdx","Object","keys","card","pop","cardsCopy","j","unassignedCopy","copyCards","a","map","c","b","col","key","axis","id","onDrag","onDragOver","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c45d5937.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.css';\n\nclass Card extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hidden: false,\n        }\n        this.toggleCard = this.toggleCard.bind(this);\n        this.deleteCard = this.deleteCard.bind(this);\n        this.moveCard = this.moveCard.bind(this);\n        this.sIdx = this.props.categoryIdx;\n        this.eIdx = 0;\n        this.cIdx = this.props.cardID;\n    }\n\n    deleteCard() {\n        const {categoryIdx, cardID} = this.props;\n        this.props.removeCard(categoryIdx, cardID);\n    }\n\n    toggleCard() {\n        return (e) => {\n            e.preventDefault();\n            this.setState({ hidden: !this.state.hidden })\n        }\n    }\n\n    moveCard(diff) {\n        const {categoryIdx, cardID} = this.props;\n        this.props.moveCard(categoryIdx, categoryIdx+diff, cardID);\n    }\n\n    render() {\n        const { updateCard, categoryIdx, cardID, title, description } = this.props;\n        return (\n            <div className=\"card\" draggable=\"true\" onDragEnd={(e) => {\n                 e.stopPropagation()\n                 let arr = this.props.fetchDragAndSet();\n                 this.props.moveCard(arr[0], arr[1], cardID)\n                }}>\n                <input className=\"card-title\" value={title} placeholder=\"Title\" onChange={updateCard(categoryIdx, cardID, \"title\")} />\n                <textarea className=\"card-description\" value={description} placeholder=\"Description\" hidden={this.state.hidden} onChange={updateCard(categoryIdx, cardID, \"description\")} />\n                \n                <div className=\"dropdown\">\n                    <p className=\"drop-button-dots\">Menu</p>\n                    <ul className=\"dropdown-content\">\n                        <li className=\"dropdown-options\"><button onClick={this.toggleCard()}>{this.state.hidden ? (<p>Show Details</p>) : (<p>Hide Details</p>)}</button></li>\n                        <li className=\"dropdown-options\"><button onClick={() => this.moveCard(-1)}>&lt;</button></li>\n                        <li className=\"dropdown-options\"><button onClick={() => this.moveCard(1)}>&gt;</button></li>\n                        <li className=\"dropdown-options\"><button onClick={this.deleteCard}>Delete</button></li>\n                    </ul>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Card;","import React from \"react\";\nimport './board.css';\nimport Card from '../card/card';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\"Todo\", \"In progress\", \"Done\"],\n      cards: { 0: [{ \"title\": \"One\", \"description\": \"Apple\", \"columnId\": 0, \"cardId\": 0 }],\n        1: [{ \"title\": \"Two\", \"description\": \"Banana\", \"columnId\": 1, \"cardId\": 0 }],\n        2: [{ \"title\": \"Three\", \"description\": \"Carrot\", \"columnId\": 2, \"cardId\": 0 }] },\n      unassigned: [],\n      drag: null,\n      set: null,\n    }\n\n    this.update = this.update.bind(this);\n    this.updateCard = this.updateCard.bind(this);\n    this.createCard = this.createCard.bind(this);\n    this.removeCard = this.removeCard.bind(this);\n    this.moveCard = this.moveCard.bind(this);\n    this.editColumn = this.editColumn.bind(this);\n    this.swap = this.swap.bind(this);\n    this.fetchDragAndSet = this.fetchDragAndSet.bind(this);\n  }\n\n  update(idx, field) {\n    return (e) => {\n      e.preventDefault();\n      if (field === \"drag\" || field === \"set\") {\n        this.setState({ [field]: idx });\n      } else {\n        let copy = this.state.columns;\n        copy[idx] = e.currentTarget.value;\n        this.setState({ columns: copy });\n      }\n    }\n  }\n\n  updateCard(columnIdx, cardID, field) {\n    return (e) => {\n      e.preventDefault();\n      let updated = this.state.cards;\n      updated[columnIdx][cardID][field] = e.currentTarget.value;\n      this.setState({ cards: updated });\n    }    \n  }\n\n  fetchDragAndSet() {\n    return [this.state.drag, this.state.set]\n  }\n\n  removeCard(idx, cardId){\n    let copy = this.state.cards;\n    \n    for(let i = cardId+1; i < copy[idx].length; i++){\n      copy[idx][i].cardId = i-1;\n    }\n    copy[idx] = copy[idx].slice(0, cardId).concat(copy[idx].slice(cardId+1));\n    this.setState({cards: copy})\n\n  }\n\n  createCard(idx, t=\"\", d=\"\") {\n    return (e) => {\n      e.preventDefault();\n      let updated = this.state.cards;\n      updated[idx].push({title: t, description: d, columnId: idx, cardId: this.state.cards[idx].length});\n      this.setState({ cards: updated });\n    }    \n  }\n  \n  moveCard(idx, newIdx, cardId) {\n    if(newIdx < 0 || newIdx >= Object.keys(this.state.columns).length) return\n    let copy = this.state.cards;\n    let card = copy[idx][cardId];\n    card.columnId = newIdx;\n    card.cardId = copy[newIdx].length;\n    copy[newIdx].push(card);\n    this.removeCard(idx, cardId);\n    this.setState({\n      cards: copy\n    })\n  }\n\n  editColumn(idx) {\n    return (e) => {\n      e.preventDefault();\n      if (idx >= 0) {\n        let copy = this.state.columns;\n        for (let i = idx; i < copy.length - 1; i++) {\n          copy[i] = copy[i + 1];\n        }\n        copy.pop();\n        let cardsCopy = this.state.cards;\n        for (let j = idx; j < Object.keys(cardsCopy).length - 1; j++) {\n          cardsCopy[j] = cardsCopy[j+1];\n        }\n        let unassignedCopy = cardsCopy[Object.keys(cardsCopy).length - 1];\n        delete cardsCopy[Object.keys(cardsCopy).length - 1];\n        this.setState({\n          unassigned: [unassignedCopy],\n          columns: copy,\n          cards: cardsCopy,\n        });\n      } else {\n        let copy = this.state.columns;\n        let cardsCopy = this.state.cards;\n        cardsCopy[Object.keys(cardsCopy).length] = [{\"title\": \"\", \"description\": \"\"}]\n        copy.push(\"\")\n        this.setState({\n          columns: copy,\n          cards: cardsCopy,\n        });  \n      }\n    }\n  }\n\n  swap() {\n    return (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n      // debugger;\n      // if(this.state.dragElement === \"ncard\") return;\n      let copyCards = this.state.cards;\n      if (this.state.drag < this.state.set) {\n        let copy = this.state.columns;\n        let a = copy[this.state.drag];\n        let cards = copyCards[this.state.drag];\n        for (let i = this.state.drag; i < this.state.set; i++) {\n          copy[i] = copy[i + 1];\n          copyCards[i+1].map(c => {\n            c.columnId--;\n            return c;\n          })\n          copyCards[i] = copyCards[i+1]\n        }\n        copy[this.state.set] = a;\n        copyCards[this.state.set] = cards;\n        this.setState({\n          columns: copy\n        });\n      } else {\n        let copy = this.state.columns;\n        let b = copy[this.state.drag];\n        let cards = copyCards[this.state.drag];\n        for (let j = this.state.drag; j > this.state.set; j--) {\n          copy[j] = copy[j - 1];\n          copyCards[j-1].map(c => {\n            c.columnId++;\n            return c;\n          })\n          copyCards[j] = copyCards[j-1];\n        }\n        copy[this.state.set] = b;\n        copyCards[this.state.set] = cards;\n        this.setState({\n          columns: copy\n        });\n      }\n      this.setState({\n          cards: copyCards\n        });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"board\">\n        <button onClick={this.editColumn()}>Add Column</button>\n        <div className=\"all-columns\">\n          {this.state.columns.map((col, idx) => (\n            <div key={idx} draggable=\"true\" axis=\"x\" id=\"column\" className=\"column\" onDrag={this.update(idx, \"drag\")} onDragOver={this.update(idx, \"set\")} onDragEnd={this.swap()}>\n              <div className=\"column-head\">\n                <input value={col} onChange={this.update(idx)} className=\"column-title\" />\n              </div>\n              \n              <div className=\"column-buttons\">\n                <button onClick={this.editColumn(idx)}>Delete Column</button>\n                <button onClick={this.createCard(idx)}>Add Task</button>\n              </div>\n              {this.state.cards[idx].map((card, cardID) => (\n                <Card title={card.title} description={card.description} categoryIdx={idx} cardID={cardID} key={cardID} fetchDragAndSet={this.fetchDragAndSet} moveCard={this.moveCard} updateCard={this.updateCard} removeCard={this.removeCard}/>\n                ))}\n            </div>\n          ))}\n        </div>\n        {/* {this.state.unassigned.map((card, cardID) => (\n          <Card title={card.title} description={card.description} categoryIdx={0} cardID={cardID} key={cardID} updateCard={this.updateCard} />\n        ))} \n        Need to figure out what to do with cards that belongs to deleted columns*/}\n      </div>\n    )\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport './reset.css'\nimport './App.css';\nimport Board from '../src/components/board/board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Kanban Board</header>\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}